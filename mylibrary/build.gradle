plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'jacoco'
    id 'maven-publish'
}
repositories {
    mavenCentral()
}
String VERSION_NAME = "6.0.0"

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName VERSION_NAME
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        buildTypes {
            debug {
                testCoverageEnabled = true
            }
        }
        release {
            minifyEnabled false
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.google.android.instantapps:instantapps:1.1.0'
    testImplementation 'junit:junit:4.13.2'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    // Set this dependency to use JUnit 4 rules
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.5.30"
    //Gson
    implementation 'com.google.code.gson:gson:2.8.6'
    //Volley
    implementation group: 'com.android.volley', name: 'volley', version: '1.2.1'
    implementation "com.google.android.material:material:1.5.0"
}


afterEvaluate {
    publishing {
        publications {
            //android.libraryVariants.all { variant ->
                //use this kind of combination if you want to skip a publication
                //if (variant.flavorName == "production" && variant.buildType.name == "debug") return
                //if (variant.flavorName != "production" && variant.buildType.name == "release") return
             //   def filename = "${archivesBaseName}-${variant.baseName}-${android.defaultConfig.versionName}"
                //println(filename)
                release(MavenPublication) {
                    //println(variant.name)
                    groupId 'com.itt'
                    artifactId = "testdatacollector"
                    /* if (project.hasProperty('paramEnv') && project.property('paramEnv') != 'RELEASE' || variant.name != "release") {
                    groupId "com.acceptto.sdk.${variant.name}"
                }*/
                    version = VERSION_NAME

                    artifact("build/intermediates/aar_main_jar/release/classes.jar")
                    //artifact(sourcesJar)

                    pom.withXml {
                        // for dependencies and exclusions
                        def dependenciesNode = asNode().appendNode('dependencies')
                        def configurationNames = ["implementation", "api", "runtimeOnly"]
                        configurationNames.each { confName ->
                            configurations[confName].allDependencies.each {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                                /* if (it.excludeRules.size() > 0) {
                                def exclusionsNode = dependencyNode.appendNode('exclusions')
                                it.excludeRules.each { rule ->
                                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', rule.group)
                                    exclusionNode.appendNode('artifactId', rule.module)
                                }
                            }*/
                            }
                        }
                    }
            }
        }
    }
}
